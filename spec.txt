STYLE

variables and function returns will be typed

allows for interfaces and generics

subclasses will fit into values that have a type of a parent class

BASE SYNTAX

"{" and "}" surround blocks
"[" and "]" are used for array creation and accesses
quotes are used for strings
";" end each instruction

KEYWORDS

return [value] *[,others];
returnf [value] *[,others];
[returntype] func [name] (*[argtype argname]) {}
if ([condition]) {}
elseif ([condition]) {}
else {}
loop {}
while ([condition]) {}
for (int [v]; [condition]; [v][op]) {}
for ([type] [v] in [iterable]) {}
continue;
break;
try {}
catch ([etype] [e]) {}
finally {}
class [name] {
    *[fieldtype fieldname;]
    constructor (*[argtype argname]) {}
    *func [methodname]
}
static [method]
static [field];
private [method]
private [field];
public [method];
public [field];
readonly [field];
const [type] [name] = [value];
import [name] [as alias]?;
export [name] [as alias]?;
export [member_path] [as alias]?;
export [func declaration] [as alias]?;
export [class declaration] [as alias]?;
export [const declaration] [as alias]?;
from [name] import +[items] [as alias]?;
[var] as [type];

RESERVED NAMES

this - for use in class and struct to access properties and methods of the current instance
Self - self type
super - for use in accessing parent constructor

BUILTINS

Error - base error
Object - base object, all classes implicitly inherit from this

PRIMITIVE TYPES

string
bool
u8
u16
u32
u64
u128
i8
i16
i32
i64
i128
f32
f64
void

OPERATORS

+       addition and concatenation
-       subtraction and negative
*       multiply and wildcard
/       division
**      exponentiation
%       modulo
!       logical and bitwise NOT
&       bitwise AND
&&      logical AND
|       bitwise OR
||      logical OR
^       logical and bitwise XOR
<       less than
>       greater than
...     spread
.       member
?       ternary
=       assignment
<=      less than or equal to
>=      greater than or equal to
<<      left shift
>>      right shift
|<      roll left
>|      roll right
==      equal
!=      not equal
!!=     bitwise and logical NOT assignment
&=      bitwise AND assignment
&&=     logical AND assignment
|=      bitwise OR assignment
||=     logical OR assignment
^=      logical and bitwise XOR assignment
+=      addition and concatenation assignment
-=      subtraction assignment
*=      multiplication assignment
/=      division assignment
**=     exponentiation assignment
%=      modulo assignment
$       unwrap
++      increment
--      decrement
<<=     left shift assignment
>>=     right shift assignment
|<=     roll left assignment
>|=     roll right assignment
,       comma
:       colon

UNWRAPPING

all non-primitive types (classes) are "wrapped" in a pointer, this means they cannot leave the scope they are created in
they may be passed as arguments to a function in which case a copy of the pointer is passed instead

however, as the class does not actually get moved, you cannot return the class as attempting to do so will result in a dangling pointer (a pointer that tries to point to something that no longer exists)

to return a class use the "unwrap" operator ("$"), this will tell the interpreter to move the class (NOTE there is an important optimization to prevent multiple moves in which a class is passed up a chain of function calls whithout being modified. it is to move the class to the first function that MODIFIES it)

ORDERS

class _ [extends [classlst,]+]? [implements [interfaces,]+]? {
    [public|private]? [static]? [readonly]? [type] [name];...
    constructor (*[arglst]) {
        [super();]?
    }
    [public|private]? [static]? [returntype] func [name] (*[arglst]) {}
}

RAW FORMAT

used to inject raw tokens into the stream

fmt: [TOKENTYPE]([TOKENDATA])

Grp(Dat(Int(0)) Opr(+) Dat(Int(1)))
Ptr("PTR TARGET")
Dat(PRIMITIVE(VALUE))
Opr(OPERATION)
Dir("DIRECTIVE NAME") Grp() Sym(;)
Kwd("MYKEY")
Lit("LITERAL VALUE")
Sym(char)
Typ(typename)

example class in RAW FORMAT:
```
@start_raw();
Kwd("class") Lit("RawClass") Sym({)
Kwd("static") Kwd("readonly") Typ(bool) Lit("boolprop")
Opr(=) Dat(Bool(true)) Sym(;)
Lit("constructor") Grp() Sym({)
Lit("println") Grp(Dat(String("Hello From Raw"))) Sym(;)
Sym(}) Sym(})
@end_raw();
```

equivalent in standard fmt:
```
class RawClass {
    static readonly bool boolprop = true;
    constructor () {
        println("Hello From Raw");
    }
}
```

DIRECTIVES

directives are statements that directly invoke rust code from the interpreter, note that directives are not hardcoded into the interpreter and are modular

accessed with "@[directive](*[arglst]);"

@start_raw(); - everything until the "@end_raw();" directive is in the RAW format

@end_raw(); - end of section written in the RAW format

@wrapper(); - function below conforms to the wrapper function standard

@wrap(Wrapper wrapper); - wraps the below function in the given wrapper function, given function must have "@wrapper" used on it

@must_override(); - the below method must be overridden by the implementation of the protocol

@no_override(); - the below method cannot be overridden by child classes or implementations of protocols

@seperate(); - the below field or method should be marked as belonging to the parent class, methods not marked seperate that invoke seperate methods or use seperate fields will not break

@unsafe() - inline directive see "directives-extended.txt" for details

@is_unsafe(); - the below function is unsafe and can only be called using an "@unsafe()" block

@transmute(Literal typename, Literal varname); - unsafe directive that converts a value to another type where the only check imposed is that the total number of bits in both types is the same, see "directives-extended.txt" for details

STD

auto - println
io - stdin {read, readline, readlines}, stdout {write}, stderr {write}
fs - File {open, close, read, write, tell, seek}
random - Random {random, getseed, setseed, randint, randf, choice, shuffle}
sys - env, argv, argc, command
thread - Thread {:new, start, stop, kill, wait, signal, listen}
mutex - Mutex {:bind, aquire, release}

MUTEXES

due to the fact that certain ways of implementing mutexes would be problematic, they must be implemented this way:

when bound, a mutex sets the "mutexed" flag of the variable to "1"